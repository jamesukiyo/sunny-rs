name: "Release"

on:
    push:
        tags:
            - "v*"

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
    NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    CARGO_TERM_COLOR: always

jobs:
    fmt-check:
        name: Format Check
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
            - uses: actions/checkout@v4
            - uses: moonrepo/setup-rust@v1
              with:
                  channel: nightly
                  components: rustfmt
                  cache-base: "^master$"
            - run: cargo fmt --check

    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: moonrepo/setup-rust@v1
              with:
                  channel: stable
                  components: clippy
                  cache-base: "^master$"
            - run: cargo clippy -- -D warnings

    build-cross-platform:
        name: Build ${{ matrix.build.NAME }}
        needs: lint
        runs-on: ${{ matrix.build.OS }}
        strategy:
            fail-fast: false
            matrix:
                build:
                    - {
                          NAME: linux-x64,
                          OS: ubuntu-latest,
                          TOOLCHAIN: stable,
                          TARGET: x86_64-unknown-linux-gnu,
                      }
                    - {
                          NAME: linux-arm64,
                          OS: ubuntu-latest,
                          TOOLCHAIN: stable,
                          TARGET: aarch64-unknown-linux-gnu,
                      }
                    - {
                          NAME: windows-x64,
                          OS: windows-latest,
                          TOOLCHAIN: stable,
                          TARGET: x86_64-pc-windows-msvc,
                      }
                    - {
                          NAME: windows-arm64,
                          OS: windows-latest,
                          TOOLCHAIN: stable,
                          TARGET: aarch64-pc-windows-msvc,
                      }
                    - {
                          NAME: darwin-x64,
                          OS: macos-14,
                          TOOLCHAIN: stable,
                          TARGET: x86_64-apple-darwin,
                      }
                    - {
                          NAME: darwin-arm64,
                          OS: macos-14,
                          TOOLCHAIN: stable,
                          TARGET: aarch64-apple-darwin,
                      }
        steps:
            - uses: actions/checkout@v4

            - uses: moonrepo/setup-rust@v1
              with:
                  channel: ${{ matrix.build.TOOLCHAIN }}
                  cache-base: "^master$"
                  targets: ${{ matrix.build.TARGET }}

            - name: Setup ARM64 cross-compilation
              if: matrix.build.TARGET == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Build binary
              run: cargo build --release --locked --target ${{ matrix.build.TARGET }}
              env:
                  PKG_CONFIG_ALLOW_CROSS: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && '1' || '' }}
                  PKG_CONFIG_PATH: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
                  CC_aarch64_unknown_linux_gnu: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
                  AR_aarch64_unknown_linux_gnu: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-ar' || '' }}
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}

            - name: Prepare binary for npm package (Unix)
              if: matrix.build.OS != 'windows-latest'
              run: |
                  # Get version for directory naming
                  VERSION=$(grep '"version"' packages/npm/package.json | cut -d'"' -f4)
                  PLATFORM_DIR=$(echo ${{ matrix.build.NAME }} | tr '-' '_')
                  TARGET_DIR="packages/npm/sunny-cli-$VERSION-$PLATFORM_DIR"
                  
                  mkdir -p "$TARGET_DIR"
                  cp target/${{ matrix.build.TARGET }}/release/sunny "$TARGET_DIR/"
                  chmod +x "$TARGET_DIR/sunny"

            - name: Prepare binary for npm package (Windows)
              if: matrix.build.OS == 'windows-latest'
              run: |
                  # Get version for directory naming  
                  $VERSION = (Get-Content packages/npm/package.json | ConvertFrom-Json).version
                  $PLATFORM_DIR = "${{ matrix.build.NAME }}".Replace('-', '_')
                  $TARGET_DIR = "packages/npm/sunny-cli-$VERSION-$PLATFORM_DIR"
                  
                  New-Item -ItemType Directory -Force -Path $TARGET_DIR
                  Copy-Item "target/${{ matrix.build.TARGET }}/release/sunny.exe" "$TARGET_DIR/"

            - name: Upload npm package directory
              uses: actions/upload-artifact@v4
              with:
                  name: npm-package-${{ matrix.build.NAME }}
                  path: packages/npm/
                  retention-days: 1

    publish-cargo:
        name: Publish to Cargo
        needs: [build-cross-platform, lint]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: moonrepo/setup-rust@v1
              with:
                  channel: stable
                  cache-base: "^master$"
            - name: Publish to crates.io
              run: cargo publish --token ${{ env.CARGO_TOKEN }}

    publish-npm:
        name: Publish NPM packages
        needs: [build-cross-platform, lint]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  registry-url: "https://registry.npmjs.org"
                  scope: "@jamesukiyo"

            - name: Download all npm package artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Merge npm package with all binaries
              run: |
                  echo "Merging all platform binaries into single npm package..."
                  
                  # Start with base npm package (contains package.json, cli.js, index.js)
                  cp -r artifacts/npm-package-linux-x64/packages/npm ./packages/
                  
                  # Merge binary directories from all other platforms
                  for artifact_dir in artifacts/npm-package-*; do
                    if [ -d "$artifact_dir/packages/npm" ]; then
                      echo "Merging binaries from $artifact_dir"
                      find "$artifact_dir/packages/npm" -name "sunny-cli-*" -type d -exec cp -r {} packages/npm/ \;
                    fi
                  done
                  
                  echo "Final npm package contents:"
                  find packages/npm -name "sunny-cli-*" -type d -exec ls -la {} \;

            - name: Publish main package
              run: |
                  publish_with_retry() {
                    local package_dir=$1
                    local max_attempts=5
                    local attempt=1
                    local base_delay=10

                    while [ $attempt -le $max_attempts ]; do
                      echo "Attempt $attempt/$max_attempts: Publishing main package"
                      cd "$package_dir"

                      if npm publish --access public; then
                        echo "Successfully published main package"
                        cd ../..
                        return 0
                      else
                        echo "Failed to publish main package (attempt $attempt)"
                        cd ../..

                        if [ $attempt -lt $max_attempts ]; then
                          local delay=$((base_delay * attempt))
                          echo "Waiting ${delay}s before retry..."
                          sleep $delay
                        fi
                      fi

                      attempt=$((attempt + 1))
                    done

                    echo "Failed to publish main package after $max_attempts attempts"
                    return 1
                  }

                  publish_with_retry "packages/npm"

    github-release:
        name: Create GitHub Release
        needs: [build-cross-platform, publish-cargo, publish-npm, lint]
        permissions:
            contents: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Download all npm package artifacts for release  
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
                  pattern: npm-package-*

            - name: Create release archives from npm packages
              run: |
                  mkdir -p release-assets
                  
                  # Extract binaries from npm package artifacts for release
                  for artifact_dir in artifacts/npm-package-*; do
                    platform=$(basename "$artifact_dir" | sed 's/npm-package-//')
                    echo "Creating release archive for $platform"
                    
                    # Find the binary directory in this artifact
                    binary_dir=$(find "$artifact_dir/packages/npm" -name "sunny-cli-*-*" -type d | head -n1)
                    if [ -n "$binary_dir" ]; then
                      cd "$binary_dir"
                      if [[ "$platform" == *"windows"* ]]; then
                        zip -r "../../../release-assets/sunny-cli-$platform.zip" *
                      else
                        tar -czf "../../../release-assets/sunny-cli-$platform.tar.gz" *
                      fi
                      cd - > /dev/null
                    fi
                  done

            - uses: marvinpinto/action-automatic-releases@latest
              with:
                  repo_token: "${{ secrets.GITHUB_TOKEN }}"
                  prerelease: false
                  files: release-assets/*
