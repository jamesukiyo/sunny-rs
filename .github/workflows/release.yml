name: "Release"

on:
    push:
        tags:
            - "v*"

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
    NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    CARGO_TERM_COLOR: always

jobs:
    fmt-check:
        name: Format Check
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
            - uses: actions/checkout@v4
            - uses: moonrepo/setup-rust@v1
              with:
                  channel: stable
                  components: rustfmt
                  cache-base: "^master$"
            - run: cargo fmt --check

    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: moonrepo/setup-rust@v1
              with:
                  channel: stable
                  components: clippy
                  cache-base: "^master$"
            - run: cargo clippy -- -D warnings

    build-cross-platform:
        name: Build ${{ matrix.build.NAME }}
        needs: lint
        runs-on: ${{ matrix.build.OS }}
        strategy:
            fail-fast: false
            matrix:
                build:
                    - {
                          NAME: linux-x64,
                          OS: ubuntu-latest,
                          TOOLCHAIN: stable,
                          TARGET: x86_64-unknown-linux-gnu,
                      }
                    - {
                          NAME: linux-arm64,
                          OS: ubuntu-latest,
                          TOOLCHAIN: stable,
                          TARGET: aarch64-unknown-linux-gnu,
                      }
                    - {
                          NAME: windows-x64,
                          OS: windows-latest,
                          TOOLCHAIN: stable,
                          TARGET: x86_64-pc-windows-msvc,
                      }
                    - {
                          NAME: windows-arm64,
                          OS: windows-latest,
                          TOOLCHAIN: stable,
                          TARGET: aarch64-pc-windows-msvc,
                      }
                    - {
                          NAME: darwin-x64,
                          OS: macos-14,
                          TOOLCHAIN: stable,
                          TARGET: x86_64-apple-darwin,
                      }
                    - {
                          NAME: darwin-arm64,
                          OS: macos-14,
                          TOOLCHAIN: stable,
                          TARGET: aarch64-apple-darwin,
                      }
        steps:
            - uses: actions/checkout@v4

            - uses: moonrepo/setup-rust@v1
              with:
                  channel: ${{ matrix.build.TOOLCHAIN }}
                  cache-base: "^master$"
                  targets: ${{ matrix.build.TARGET }}

            - name: Setup ARM64 cross-compilation
              if: matrix.build.TARGET == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Build binary
              run: cargo build --release --locked --target ${{ matrix.build.TARGET }}
              env:
                  PKG_CONFIG_ALLOW_CROSS: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && '1' || '' }}
                  PKG_CONFIG_PATH: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
                  CC_aarch64_unknown_linux_gnu: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
                  AR_aarch64_unknown_linux_gnu: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-ar' || '' }}
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}

            - name: Upload binary
              uses: actions/upload-artifact@v4
              with:
                  name: binary-${{ matrix.build.NAME }}
                  path: target/${{ matrix.build.TARGET }}/release/sunny*
                  retention-days: 1

    publish-cargo:
        name: Publish to Cargo
        needs: [build-cross-platform, lint]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: moonrepo/setup-rust@v1
              with:
                  channel: stable
                  cache-base: "^master$"
            - name: Publish to crates.io
              run: cargo publish --token ${{ env.CARGO_TOKEN }}

    publish-npm:
        name: Publish NPM packages
        needs: [build-cross-platform, lint]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  registry-url: "https://registry.npmjs.org"
                  scope: "@jamesukiyo"

            - name: Download all binary artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
                  pattern: binary-*

            - name: Create npm package with all binaries
              run: |
                  VERSION=$(grep '"version"' packages/npm/package.json | cut -d'"' -f4)

                  # Create npm package
                  mkdir -p npm-package
                  cp -r packages/npm/* npm-package/

                  cp README.md npm-package/

                  # Add binaries to platform directories
                  for artifact_dir in artifacts/binary-*; do
                    platform=$(basename "$artifact_dir" | sed 's/binary-//' | tr '-' '_')
                    target_dir="npm-package/sunny-cli-$VERSION-$platform"
                    mkdir -p "$target_dir"
                    cp "$artifact_dir"/sunny* "$target_dir/"
                    chmod +x "$target_dir"/sunny* 2>/dev/null || true
                  done

                  ls -la npm-package/

            - name: Publish main package
              run: |
                  publish_with_retry() {
                    local package_dir=$1
                    local max_attempts=5
                    local attempt=1
                    local base_delay=10

                    while [ $attempt -le $max_attempts ]; do
                      echo "Attempt $attempt/$max_attempts: Publishing main package"
                      cd "$package_dir"

                      if npm publish --access public; then
                        echo "Successfully published main package"
                        cd ../..
                        return 0
                      else
                        echo "Failed to publish main package (attempt $attempt)"
                        cd ../..

                        if [ $attempt -lt $max_attempts ]; then
                          local delay=$((base_delay * attempt))
                          echo "Waiting ${delay}s before retry..."
                          sleep $delay
                        fi
                      fi

                      attempt=$((attempt + 1))
                    done

                    echo "Failed to publish main package after $max_attempts attempts"
                    return 1
                  }

                  publish_with_retry "npm-package"

    update-scoop:
        name: Update Scoop Manifest
        needs: [build-cross-platform, lint]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Download all binary artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
                  pattern: binary-*

            - name: Create Windows release archives
              run: |
                  mkdir -p release-assets

                  # Create Windows zip files for scoop
                  for artifact_dir in artifacts/binary-windows-*; do
                    platform=$(basename "$artifact_dir" | sed 's/binary-//')
                    echo "Creating release archive for $platform"

                    # Create zip from current directory pointing to artifact contents
                    (cd "$artifact_dir" && zip -r "../../release-assets/sunny-cli-$platform.zip" *)
                  done

            - name: Update Scoop manifest hashes
              run: |
                  # Calculate hashes for Windows binaries
                  HASH_X64=$(sha256sum release-assets/sunny-cli-windows-x64.zip | cut -d' ' -f1)
                  HASH_ARM64=$(sha256sum release-assets/sunny-cli-windows-arm64.zip | cut -d' ' -f1)

                  # Update hashes in manifest
                  sed -i "0,/\"hash\": \"\"/{s/\"hash\": \"\"/\"hash\": \"$HASH_X64\"/}" packages/scoop/sunny-cli.json
                  sed -i "0,/\"hash\": \"\"/{s/\"hash\": \"\"/\"hash\": \"$HASH_ARM64\"/}" packages/scoop/sunny-cli.json

                  echo "Updated scoop manifest with hashes:"
                  grep "hash" packages/scoop/sunny-cli.json

            - name: Upload Windows zip files for GitHub release
              uses: actions/upload-artifact@v4
              with:
                  name: windows-release-zips
                  path: release-assets/sunny-cli-windows-*.zip
                  retention-days: 1

            - name: Commit updated scoop manifest
              run: |
                  git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git config --local user.name "github-actions[bot]"
                  git add packages/scoop/sunny-cli.json
                  git commit -m "chore: update scoop manifest hashes for ${GITHUB_REF#refs/tags/}" || echo "No changes to commit"
                  git push origin HEAD:master || echo "Failed to push scoop hash updates"

    github-release:
        name: Create GitHub Release
        needs:
            [
                build-cross-platform,
                publish-cargo,
                publish-npm,
                update-scoop,
                lint,
            ]
        permissions:
            contents: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Download all binary artifacts for release
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
                  pattern: binary-*

            - name: Create release archives from binary artifacts
              run: |
                  mkdir -p release-assets

                  # Create archives from binary artifacts for release (non-Windows only)
                  for artifact_dir in artifacts/binary-*; do
                    platform=$(basename "$artifact_dir" | sed 's/binary-//')
                    echo "Creating release archive for $platform"

                    # Only create non-Windows archives (Windows zips come from scoop job)
                    if [[ "$platform" != *"windows"* ]]; then
                      (cd "$artifact_dir" && tar -czf "../../release-assets/sunny-cli-$platform.tar.gz" *)
                    fi
                  done

            - name: Download Windows zip files from scoop job
              uses: actions/download-artifact@v4
              with:
                  name: windows-release-zips
                  path: release-assets/

            - uses: marvinpinto/action-automatic-releases@latest
              with:
                  repo_token: "${{ secrets.GITHUB_TOKEN }}"
                  prerelease: false
                  files: |
                      ./release-assets/*
